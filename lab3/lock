#!/usr/bin/env python3

from sys import argv, exit
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import (
	Cipher, algorithms, modes
)
import os.path, ecdsa

def main():
#	if len(argv) != 9:
#		print("Usage: ./lock -d <directory> -p <action-pub-key> -r <action-priv-key> -s <action-subject>")
#		raise Exception("Bad Command Line Args")

	fin = open(argv[4],"r")
#	lines = fin.read().splitlines()
#	fin.close()
	algorithm = fin.readline().strip("\n")#lines[0].decode()
	subject = fin.readline().strip("\n")#lines[1].decode()
	keydata = fin.read()#.split("'")[1]#lines[2] 

	literal = "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsEqaKdLd66Vl3har1l0j\nxH2cbowPzqZYAHQMM/8RyL1BA0QXn7ha7zmtdbrWbPTR/nzswO+zOaSl    bzuvC318\n1KPwHNUFGYO7PduhR2nt32eieNiRWQKd8vkMRyklxfDp9Iehmw3djMppAw0cNcnl\nILh214+qrFql3b6NOoM8sCfwfdZcC0W/VkThSEtXof35l+LF3XDbiumwzhMpE8Zq\n1q+BPWs8jhtEKI3AwA97DHjtxJ0ptyz4G76b    D9p4ymxkyNElGgpGH5yYQiyBWn0/\nC4sg/jGVP+ygui6nRgrBEKWHJxCaPX/8kpC2ygq9DsQnYdD6F9rWoZz0a7YvdfMY\n+QIDAQAB\n-----END PUBLIC KEY-----"

	l2 = "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsEqaKdLd66Vl3har1l0j\nxH2cbowPzqZYAHQMM/8RyL1BA0QXn7ha7zmtdbrWbPTR/nzswO+zOaSlbzuvC318\n1KPwHNUFGYO7PduhR2nt32eieNiRWQKd8vkMRyklxfDp9Iehmw3djMppAw0cNcnl\nILh214+qrFql3b6NOoM8sCfwfdZcC0W/VkThSEtXof35l+LF3XDbiumwzhMpE8Zq\n1q+BPWs8jhtEKI3AwA97DHjtxJ0ptyz4G76bD9p4ymxkyNElGgpGH5yYQiyBWn0/\nC4sg/jGVP+ygui6nRgrBEKWHJxCaPX/8kpC2ygq9DsQnYdD6F9rWoZz0a7YvdfMY\n+QIDAQAB\n-----END PUBLIC KEY-----"

	print(algorithm)
	print(subject)
	print(type(keydata))
	print(len(keydata), len(literal), len(l2))

	if subject != argv[8]:
		print("Subjects do not match!")
		exit()
	
	#Gen random 256 AES key
	AESkey = os.urandom(32)
	iv = os.urandom(12)
	encryptor = Cipher(
		algorithms.AES(AESkey),
		modes.GCM(iv),
		backend=default_backend()
	).encryptor()

	#Uses RSA to encrypt the AES key and store it in keyfile
	rsaKey = RSA.importKey(keydata)
	#rsaKey = RSA.importKey(l2)
	cipher = PKCS1_OAEP.new(rsaKey)
	AESCiphertext = cipher.encrypt(AESkey)
#	keyfile = argv[2] + "/keyfile"
#	fout = open(keyfile,"w")
#	fout.write(AESCiphertext)
#	fout.close()

#	fin = open(argv[6],"r")
#	lines = fin.read().splitlines()
#	fin.close()
#	subject = str(lines[0])
#	ecKeyData = str(lines[1])
#	algorithm = str(lines[2]) #why do i care????

#	sig = ecKeyData.sign(AESCiphertext)
#	keyfileSig = argv[2] + "/keyfile.sig"
#	fout = open(keyfileSig, "w")
#	fout.write(sig)
#	fout.close()

	if argv[2] == "." or argv[2] == "./" or argv[2] == "./.":
		print("DON'T RUN THIS IN THE CURRENT DIR!!")
		exit()

#	for root,dirs,files in os.walk(argv[2], topdown=True):
#		for name in files:
#			filename = os.path.join(root,name)
#			fin = open(filename, "rb")
#			contents = fin.read()
#			fin.close()
#			fout = open(filename, "wb")
#			ciphertext = encryptor.update(contents) + encryptor.finalize()
#			fout.write(encryptor.tag)
#			fout.write("\n")
#			fout.write(iv)
#			fout.write("\n")
#			fout.write(ciphertext)
#			fout.close()
			#Basically, open every file, read it all in, encrypt it, spit it back out with the tag and iv i guess?

if __name__ == "__main__":
	exit(main())

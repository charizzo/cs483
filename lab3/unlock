#!/usr/bin/env python3
from ecdsa import VerifyingKey, BadSignatureError
from sys import argv, exit
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import (
    Cipher, algorithms, modes
)
import os
import os.path, ecdsa
import sys

def main():
	if len(sys.argv) != 9:
		print("not enough arguments")
		exit()
	if sys.argv[1] !="-d":
		print("Incorrect 1st argument should be -d")
		exit()
	if sys.argv[3] !="-p":
		print("Incorrect 3rd argument should be -p")
		exit()
	if sys.argv[5] !="-r":
		print("Incorrect 5th argument should be -r")
		exit()
	if sys.argv[7] !="-s":
		print("Incorrect 7th argument should be -s")
		exit()
	directory = sys.argv[2]
	pubkey = sys.argv[4]
	privkey = sys.argv[6]
	subject = sys.argv[8]


	fin = open(pubkey,'r')
	pubkeysubject = fin.readline().strip("\n")
	pubkeydata = fin.readline().strip("\n")
	pubkeyalgo = fin.readline().strip("\n")
	fin.close()

	if pubkeysubject != subject:
		print("Subjects did not match")
		exit()
	vk = VerifyingKey.from_pem(open("privkey").read())
	message = open(keyfile.sig,"rb").read()

	if vk.verify(pubkeydata, message):
		os.remove("keyfile.sig")
	else:
		print("BAD SIGNATURE")
	
	for root, dirs, files in os.walk(directory, topdown=TRUE):
		for name in files:
			filename = os.path.join(root,name)
			fin = open(filename,"rb")
			tag = fin.readline().strip("\n")
			iv = fin.readline().strip("\n")
			data fin.read()
			decryptor = Cipher(
				algorithms.AES(key), #should not be key here
				modes.GCM(iv, tag),
				backend=default_backend()
			).decryptor()

if __name__ == "__main__":
    exit(main())

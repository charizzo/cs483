#!/usr/bin/env python3
from ecdsa import VerifyingKey, BadSignatureError
import os.path,ecdsa,sys
from sys import argv, exit
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import (
    Cipher, algorithms, modes
)
import struct

def readPub(filename):
    f = open(filename, "r")
    lastline = f.read().split()
    if lastline[-2] == 'rsa':
        pubKey = RSA.importKey(open(filename, "r").read())

    else:
        pubKey = ecdsa.VerifyingKey.from_pem(open(filename, "r").read())

    f.close()
    return [lastline[-2], lastline[-1], pubKey]

def readPriv(filename):
    f = open(filename, "r")
    lastline = f.read().split()
    if lastline[-1] == 'rsa':
        privKey = RSA.importKey(open(filename, "r").read())

    else:
        privKey = ecdsa.SigningKey.from_pem(open(filename, "r").read())

    f.close()
    return [lastline[-1], privKey]

def main():
	if len(sys.argv) != 9:
		print("not enough arguments")
		exit()
	if sys.argv[1] !="-d":
		print("Incorrect 1st argument should be -d")
		exit()
	if sys.argv[3] !="-p":
		print("Incorrect 3rd argument should be -p")
		exit()
	if sys.argv[5] !="-r":
		print("Incorrect 5th argument should be -r")
		exit()
	if sys.argv[7] !="-s":
		print("Incorrect 7th argument should be -s")
		exit()
	directory = sys.argv[2]
	pubkey = sys.argv[4]
	privkey = sys.argv[6]
	subject = sys.argv[8]
	keyfilesig=directory+"/keyfile.sig"
	keyfile=directory+"/keyfile"

	pubalgo,pubkeysubject,vk=readPub(pubkey)

	privkeyalgo, key = readPriv(privkey)

	if pubkeysubject != subject:
		print("Subjects did not match")
		exit()

	message = open(keyfile,'rb').read()
	sig = open(keyfilesig,'rb').read()

	if vk.verify(sig, message):
		os.remove(keyfilesig)
		os.remove(keyfile)
	#	print("YAH-WHO")
	else:
		print("BAD SIGNATURE")
		exit()
	
	cipher = PKCS1_OAEP.new(key)
	AESKey = cipher.decrypt(message)

	if directory=="." or directory=="./":
		exit()

	for root, dirs, files in os.walk(directory, topdown=True):
		for name in files:
			filename = os.path.join(root,name)

			fin = open(filename,'rb')

			tag = fin.read(16)
			iv = fin.read(12)
			ciphertext= fin.read()

			decryptor = Cipher(
				algorithms.AES(AESKey),
				modes.GCM(iv,tag),
				backend=default_backend()
			).decryptor()
			fout = open(filename,'wb').close()
			fout = open(filename,'wb')
			i=decryptor.update(ciphertext) + decryptor.finalize()
			fout.write(i)
			fout.close()

if __name__ == "__main__":
    exit(main())

#!/usr/bin/env python3
from Crypto.Cipher import AES
from sys import argv, exit
import sys
import threading
import multiprocessing

final={}

def decrypt(decipher,msg,num):
	lock=multiprocessing.Lock()
	bleh=[]
	lock.acquire()
	iv2=bytearray(decipher.encrypt(num.to_bytes(16,byteorder='big')))
	for x in range(len(msg)):
		print()
		print(iv2[x],"iv2")
		print(msg[x],"msg")
		print()
		bleh.append(iv2[x] ^ msg[x])
	final.update({num:bleh})
	lock.release()



def main():
	

	if len(argv) != 7:
		print("not enough arguments")
		return

	keything=sys.argv[1]
	keyfile=sys.argv[2]
	ithing=sys.argv[3]
	encryptedfile=sys.argv[4]
	othing=sys.argv[5]
	outputfile=sys.argv[6]

	if keything !="-k":
		print(keything + " is an unknown operation")
		return
	if ithing !="-i":
		print(ithing + " is an unknown operation")
		return
	if othing !="-o":
		print(othing + " is an unknown operation")
		return

	p=open(keyfile,"r")
	hex_key=p.read()
	p.close()
	key=bytes.fromhex(hex_key)

	decipher = AES.new(key, AES.MODE_ECB)
	o=open(outputfile,'wb')
	last=[]
	threads=[]

	with open(encryptedfile, 'rb') as f:
		iv=bytes(f.read(16))
		intiv=int.from_bytes(iv, byteorder='big')
		intiv+=1
		while 1:
			msg=bytearray(f.read(16))
			if msg == bytes('','utf-8'):
				break
			thread=threading.Thread(target=decrypt,args=(decipher,msg,intiv))
			thread.start()
			threads.append(thread)
			intiv+=1


	for x in range(len(threads)):
		threads[x].join()
	sorted(final)
	for i in final.values():
		for j in i:
			last.append(j)
			print(j)
	
	o.write(bytes(last))

if __name__ == "__main__":
	exit(main())

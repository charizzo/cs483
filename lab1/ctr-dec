#!/usr/bin/env python3
from Crypto.Cipher import AES
from sys import argv, exit
import sys
import threading
from multiprocessing import Pool
import os.path

decipher=''

def decrypt(tup):
	global decipher
	iv2=bytearray(decipher.encrypt(tup[1].to_bytes(16,byteorder='big')))
	for x in range(len(tup[0])):
		tup[0][x]^=iv2[x]
	return tup[0]

def main():
	

	if len(argv) != 7:
		print("not enough arguments")
		return

	keything=sys.argv[1]
	keyfile=sys.argv[2]
	ithing=sys.argv[3]
	encryptedfile=sys.argv[4]
	othing=sys.argv[5]
	outputfile=sys.argv[6]

	if keything !="-k":
		print(keything + " is an unknown operation")
		return
	if ithing !="-i":
		print(ithing + " is an unknown operation")
		return
	if othing !="-o":
		print(othing + " is an unknown operation")
		return

	p=open(keyfile,"r")
	hex_key=p.read()
	p.close()
	key=bytes.fromhex(hex_key)
	global decipher
	decipher = AES.new(key, AES.MODE_ECB)

	o=open(outputfile,'wb')
	msgBlock=[]

	with open(encryptedfile, 'rb') as f:
		iv=bytes(f.read(16))
		intiv=int.from_bytes(iv, byteorder='big')
		intiv+=1
		count=0
		while 1:
			msg=bytearray(f.read(16))
			if msg == bytes('','utf-8'):
				break
			msgBlock.append(msg)

	MsgNiv=[]
	for x in msgBlock:
		MsgNiv.append((x,intiv))
		intiv+=1

	with Pool(4) as p:
	#	cipherTexts = [p.apply(decrypt,args=(key,MsgNiv[x],MsgNiv[x+1])) for x in range(0,len(MsgNiv)-1,2)]
		cipherTexts=[p.map(decrypt,MsgNiv)]
	for a in range(len(cipherTexts[0])):
		o.write(cipherTexts[0][a])
	o.close()	

if __name__ == "__main__":
	exit(main())

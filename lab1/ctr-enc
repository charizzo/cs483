#!/usr/bin/env python3

from sys import argv,exit
from Crypto.Cipher import AES
from Crypto import Random
from multiprocessing import Pool
import os.path
import threading

cipher = ''

def main():
	if len(argv) != 7:
		print("Usage: ./ctr-enc.py -k <key file> -i <input file> -o <output file>")
		raise Exception("Bad Command Line Args")

	fin = open(argv[2],"r")
	hexKey = fin.read()
	fin.close()
	fout = open(argv[6],"wb+")

	counter = 0
	messageBlocks = []
	fin = open(argv[4],"rb")
	while 1:
		temp = bytearray(fin.read(16)) 
		if temp == bytes('','utf-8'):
			break
		messageBlocks.append(temp)
		counter += 1
	fin.close()	
	
	global cipher

	IV = bytes(os.urandom(16))
	IVint=int.from_bytes(IV,byteorder='big')
	IVint += 1
	cipher = AES.new(bytes.fromhex(hexKey),AES.MODE_ECB)
	fout.write(bytes(IV))

#	for i in range (0,counter):
#		interMed = bytearray(cipher.encrypt(IVint.to_bytes(16,byteorder='big')))
#		for j in range (0,len(messageBlocks[i])):
#			messageBlocks[i][j] ^= interMed[i]
#		fout.write(messageBlocks[i])
#		IVint+=1

#	fout.close()
# make a tuple of block and y 
#	ivMsgTup=()
	ivMsgTup=[]
	for x in messageBlocks:
		ivMsgTup.append((x,IVint))
		IVint+=1

	with Pool(4) as p:
#		cipherTexts = [p.map(encrypt,args=(ivMsgTup[x],ivMsgTup[x+1],hexKey)) for x in range(0,len(ivMsgTup)-1,2)]
		cipherTexts=[p.map(encrypt,ivMsgTup)]

	for a in range(len(cipherTexts[0])):
		fout.write(cipherTexts[0][a])
	fout.close()

def encrypt(tup):
#	cipher = AES.new(bytes.fromhex(hexKey),AES.MODE_ECB)
	global cipher
	interMed = bytearray(cipher.encrypt(tup[1].to_bytes(16,byteorder='big')))
	for i in range (0,len(tup[0])):
		tup[0][i] ^= interMed[i]

	
	return tup[0]	
	


if __name__ == "__main__":
	exit(main())
